======================================
Doctest for `7-base_geometry` module
=======================================
The `BaseGeometry` class contain two methods area() and integer_validator()

Usage:
------
First import the class from the module

	>>> import sys
	>>> sys.path.append('..')
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test if the area() is working as suppose

	>>> base_geometry = BaseGeometry()
	>>> base_geometry.area()
	Traceback (most recent call last):
		...
	Exception: area() is not implemented

Test integer_validator()

	>>> base_geometry.integer_validator()
	Traceback (most recent call last):
		...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
	>>> base_geometry.integer_validator('kay')
	Traceback (most recent call last):
		...
	TypeError: integer_validator() missing 1 required positional argument: 'value'
	>>> base_geometry.integer_validator('width', '89')
	Traceback (most recent call last):
		...
	TypeError: width must be an integer
	>>> base_geometry.integer_validator('width', True)
        Traceback (most recent call last):
                ...
        TypeError: width must be an integer
	>>> base_geometry.integer_validator('width', [8, 9])
        Traceback (most recent call last):
                ...
        TypeError: width must be an integer
	>>> base_geometry.integer_validator('width', (8, 9))
        Traceback (most recent call last):
                ...
        TypeError: width must be an integer
	>>> base_geometry.integer_validator('width', 0)
        Traceback (most recent call last):
                ...
        ValueError: width must be greater than 0
	>>> base_geometry.integer_validator('width', -4)
        Traceback (most recent call last):
                ...
        ValueError: width must be greater than 0
	>>> base_geometry.integer_validator('width', 6)
	>>> 
